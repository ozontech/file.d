pipelines:
  http_file:
    input:
      type: http
      meta:
        remote_addr: "{{ .remote_addr }}"
        user_agent: '{{ index (index .request.Header "User-Agent") 0}}'
    actions:
      - type: discard
        match_fields:
          should_drop: ok
        match_mode: or
      - type: join
        field: log
        start: '/^(panic:)|(http: panic serving)/'
        continue: '/(^$)|(goroutine [0-9]+ \[)|(\([0-9]+x[0-9,a-f]+)|(\.go:[0-9]+ \+[0-9]x)|(\/.*\.go:[0-9]+)|(\(...\))|(main\.main\(\))|(created by .*\/.*\.)|(^\[signal)|(panic.+[0-9]x[0-9,a-f]+)|(panic:)/'
        match_fields:
          stream: stderr
      - type: mask
        masks:
          - re: 'world'
        mask_applied_field: 'leak'
        mask_applied_value: 'true'
    output:
      type: file
