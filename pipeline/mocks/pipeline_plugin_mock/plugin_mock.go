// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline/plugin.go

// Package pipeline_plugin_mock is a generated GoMock package.
package pipeline_plugin_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pipeline "github.com/ozontech/file.d/pipeline"
)

// MockInputPlugin is a mock of InputPlugin interface.
type MockInputPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockInputPluginMockRecorder
}

// MockInputPluginMockRecorder is the mock recorder for MockInputPlugin.
type MockInputPluginMockRecorder struct {
	mock *MockInputPlugin
}

// NewMockInputPlugin creates a new mock instance.
func NewMockInputPlugin(ctrl *gomock.Controller) *MockInputPlugin {
	mock := &MockInputPlugin{ctrl: ctrl}
	mock.recorder = &MockInputPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputPlugin) EXPECT() *MockInputPluginMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockInputPlugin) Commit(arg0 *pipeline.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit.
func (mr *MockInputPluginMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockInputPlugin)(nil).Commit), arg0)
}

// Start mocks base method.
func (m *MockInputPlugin) Start(config pipeline.AnyConfig, params *pipeline.InputPluginParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", config, params)
}

// Start indicates an expected call of Start.
func (mr *MockInputPluginMockRecorder) Start(config, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInputPlugin)(nil).Start), config, params)
}

// Stop mocks base method.
func (m *MockInputPlugin) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockInputPluginMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInputPlugin)(nil).Stop))
}

// MockActionPlugin is a mock of ActionPlugin interface.
type MockActionPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockActionPluginMockRecorder
}

// MockActionPluginMockRecorder is the mock recorder for MockActionPlugin.
type MockActionPluginMockRecorder struct {
	mock *MockActionPlugin
}

// NewMockActionPlugin creates a new mock instance.
func NewMockActionPlugin(ctrl *gomock.Controller) *MockActionPlugin {
	mock := &MockActionPlugin{ctrl: ctrl}
	mock.recorder = &MockActionPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionPlugin) EXPECT() *MockActionPluginMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockActionPlugin) Do(arg0 *pipeline.Event) pipeline.ActionResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(pipeline.ActionResult)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockActionPluginMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockActionPlugin)(nil).Do), arg0)
}

// Start mocks base method.
func (m *MockActionPlugin) Start(config pipeline.AnyConfig, params *pipeline.ActionPluginParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", config, params)
}

// Start indicates an expected call of Start.
func (mr *MockActionPluginMockRecorder) Start(config, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockActionPlugin)(nil).Start), config, params)
}

// Stop mocks base method.
func (m *MockActionPlugin) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockActionPluginMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockActionPlugin)(nil).Stop))
}

// MockOutputPlugin is a mock of OutputPlugin interface.
type MockOutputPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockOutputPluginMockRecorder
}

// MockOutputPluginMockRecorder is the mock recorder for MockOutputPlugin.
type MockOutputPluginMockRecorder struct {
	mock *MockOutputPlugin
}

// NewMockOutputPlugin creates a new mock instance.
func NewMockOutputPlugin(ctrl *gomock.Controller) *MockOutputPlugin {
	mock := &MockOutputPlugin{ctrl: ctrl}
	mock.recorder = &MockOutputPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputPlugin) EXPECT() *MockOutputPluginMockRecorder {
	return m.recorder
}

// Out mocks base method.
func (m *MockOutputPlugin) Out(arg0 *pipeline.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Out", arg0)
}

// Out indicates an expected call of Out.
func (mr *MockOutputPluginMockRecorder) Out(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockOutputPlugin)(nil).Out), arg0)
}

// Start mocks base method.
func (m *MockOutputPlugin) Start(config pipeline.AnyConfig, params *pipeline.OutputPluginParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", config, params)
}

// Start indicates an expected call of Start.
func (mr *MockOutputPluginMockRecorder) Start(config, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOutputPlugin)(nil).Start), config, params)
}

// Stop mocks base method.
func (m *MockOutputPlugin) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockOutputPluginMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOutputPlugin)(nil).Stop))
}

// MockAnyPlugin is a mock of AnyPlugin interface.
type MockAnyPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockAnyPluginMockRecorder
}

// MockAnyPluginMockRecorder is the mock recorder for MockAnyPlugin.
type MockAnyPluginMockRecorder struct {
	mock *MockAnyPlugin
}

// NewMockAnyPlugin creates a new mock instance.
func NewMockAnyPlugin(ctrl *gomock.Controller) *MockAnyPlugin {
	mock := &MockAnyPlugin{ctrl: ctrl}
	mock.recorder = &MockAnyPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyPlugin) EXPECT() *MockAnyPluginMockRecorder {
	return m.recorder
}

// MockAnyConfig is a mock of AnyConfig interface.
type MockAnyConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAnyConfigMockRecorder
}

// MockAnyConfigMockRecorder is the mock recorder for MockAnyConfig.
type MockAnyConfigMockRecorder struct {
	mock *MockAnyConfig
}

// NewMockAnyConfig creates a new mock instance.
func NewMockAnyConfig(ctrl *gomock.Controller) *MockAnyConfig {
	mock := &MockAnyConfig{ctrl: ctrl}
	mock.recorder = &MockAnyConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnyConfig) EXPECT() *MockAnyConfigMockRecorder {
	return m.recorder
}
