ARG APP_IMAGE=ubuntu:latest

# Build
FROM --platform=$BUILDPLATFORM golang:1.24-alpine AS build

ARG VERSION
ARG BUILD_TIME

WORKDIR /file.d

COPY go.mod go.sum ./

RUN go mod download

COPY . .

ENV CGO_ENABLED 0
ENV GOOS linux
ENV GOARCH amd64

RUN go build -trimpath \
    -pgo default.pgo \
    -ldflags "-X github.com/ozontech/file.d/buildinfo.Version=${VERSION}" \
    -o file.d ./cmd/file.d

# Deploy
FROM $APP_IMAGE

# Install packages based on distribution
RUN if [ -f /etc/debian_version ]; then \
    apt-get update && apt-get install -y \
    systemd \
    strace \
    tcpdump \
    traceroute \
    telnet \
    iotop \
    curl \
    jq \
    iputils-ping \
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean; \
    elif [ -f /etc/redhat-release ]; then \
    dnf update -y && dnf install -y \
    systemd \
    strace \
    tcpdump \
    traceroute \
    telnet \
    iotop \
    jq \
    iputils \
    && dnf clean all; \
    elif [ -f /etc/alpine-release ]; then \
    apk update && apk add --no-cache \
    strace \
    tcpdump \
    traceroute \
    inetutils-telnet \
    iotop \
    curl \
    jq \
    htop \
    procps \
    iputils \
    && rm -rf /var/cache/apk/*; \
    fi


WORKDIR /file.d

COPY --from=build /file.d/file.d /file.d/file.d

CMD [ "./file.d" ]
