// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/output/postgres/postgres.go

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx"
)

// MockPgxIface is a mock of PgxIface interface.
type MockPgxIface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxIfaceMockRecorder
}

// MockPgxIfaceMockRecorder is the mock recorder for MockPgxIface.
type MockPgxIfaceMockRecorder struct {
	mock *MockPgxIface
}

// NewMockPgxIface creates a new mock instance.
func NewMockPgxIface(ctrl *gomock.Controller) *MockPgxIface {
	mock := &MockPgxIface{ctrl: ctrl}
	mock.recorder = &MockPgxIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxIface) EXPECT() *MockPgxIfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPgxIface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPgxIfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxIface)(nil).Close))
}

// Exec mocks base method.
func (m *MockPgxIface) Exec(sql string, arguments ...interface{}) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgxIfaceMockRecorder) Exec(sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgxIface)(nil).Exec), varargs...)
}

// MockPgxIfaceOld is a mock of PgxIfaceOld interface.
type MockPgxIfaceOld struct {
	ctrl     *gomock.Controller
	recorder *MockPgxIfaceOldMockRecorder
}

// MockPgxIfaceOldMockRecorder is the mock recorder for MockPgxIfaceOld.
type MockPgxIfaceOldMockRecorder struct {
	mock *MockPgxIfaceOld
}

// NewMockPgxIfaceOld creates a new mock instance.
func NewMockPgxIfaceOld(ctrl *gomock.Controller) *MockPgxIfaceOld {
	mock := &MockPgxIfaceOld{ctrl: ctrl}
	mock.recorder = &MockPgxIfaceOldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxIfaceOld) EXPECT() *MockPgxIfaceOldMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPgxIfaceOld) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPgxIfaceOldMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxIfaceOld)(nil).Close))
}

// Exec mocks base method.
func (m *MockPgxIfaceOld) Exec(sql string, arguments ...interface{}) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgxIfaceOldMockRecorder) Exec(sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgxIfaceOld)(nil).Exec), varargs...)
}
