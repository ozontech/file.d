// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/output/clickhouse/clickhouse.go

// Package mock_clickhouse is a generated GoMock package.
package mock_clickhouse

import (
	context "context"
	reflect "reflect"

	ch "github.com/ClickHouse/ch-go"
	gomock "github.com/golang/mock/gomock"
)

// MockClickhouse is a mock of Clickhouse interface.
type MockClickhouse struct {
	ctrl     *gomock.Controller
	recorder *MockClickhouseMockRecorder
}

// MockClickhouseMockRecorder is the mock recorder for MockClickhouse.
type MockClickhouseMockRecorder struct {
	mock *MockClickhouse
}

// NewMockClickhouse creates a new mock instance.
func NewMockClickhouse(ctrl *gomock.Controller) *MockClickhouse {
	mock := &MockClickhouse{ctrl: ctrl}
	mock.recorder = &MockClickhouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickhouse) EXPECT() *MockClickhouseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClickhouse) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClickhouseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClickhouse)(nil).Close))
}

// Do mocks base method.
func (m *MockClickhouse) Do(ctx context.Context, query ch.Query) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockClickhouseMockRecorder) Do(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClickhouse)(nil).Do), ctx, query)
}
