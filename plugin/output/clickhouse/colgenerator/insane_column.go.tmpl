// Code generated by "./colgenerator"; DO NOT EDIT.

package clickhouse

import (
	"github.com/ClickHouse/ch-go/proto"
	"github.com/google/uuid"
)

{{ range $type := .Types }}

{{ if not $type.CustomImpl }}
// {{ $type.ColumnTypeName }} represents Clickhouse {{ $type.ChTypeName }} type.
type {{ $type.ColumnTypeName }} struct {
	// col contains values for the {{ $type.ChTypeName }} type.
	col *{{ $type.LibChTypeNameFull }}
	{{ if $type.Nullable }}
	// nullCol contains nullable values for the Nullable({{ $type.ChTypeName }}) type.
	nullCol  *{{ $type.NullableTypeName }}
	// nullable the truth if the column is nullable.
	nullable bool
	{{ end }}
}
{{ else }}
// struct {{ $type.ColumnTypeName }} defined and implemented in another file
{{ end }}

var _ InsaneColInput = (*{{ $type.ColumnTypeName }})(nil)
{{- if $type.Preparable }}
var _ proto.Preparable = (*{{ $type.ColumnTypeName }})(nil)
{{- end }}


{{ if not $type.CustomImpl }}

{{ if $type.Nullable  }}
func New{{- $type.ColumnTypeName }}(nullable bool) *{{ $type.ColumnTypeName }} {
	return &{{ $type.ColumnTypeName }}{
	col:      new({{ $type.LibChTypeNameFull }}),
			nullCol:  new({{ $type.LibChTypeNameFull }}).Nullable(),
				nullable: nullable,
	}
}
{{ else }}
func New{{- $type.ColumnTypeName }}() *{{ $type.ColumnTypeName }} {
	return &{{ $type.ColumnTypeName }}{
	col: &{{ $type.LibChTypeNameFull }}{},
	}
}
{{ end }}

// Append the insaneJSON.Node to the batch.
func (t *{{ $type.ColumnTypeName }}) Append(node InsaneNode) error {
	if node == nil || node.IsNull() {
		{{- if not $type.Nullable }}
		return ErrNodeIsNil
		{{- else }}
		if !t.nullable {
			return ErrNodeIsNil
		}
		t.nullCol.Append(proto.Null[{{- $type.GoName }}]())
		return nil
		{{- end }}
	}
	{{ if $type.Convertable }}
	v, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}

	val := {{ $type.ConvertInsaneJSONValue }}(v)
	{{ else }}
	val, err := node.{{- $type.InsaneConvertFunc }}()
	if err != nil {
		return err
	}
	{{ end }}
	{{ if $type.Nullable }}
	if t.nullable {
		t.nullCol.Append(proto.NewNullable(val))
		return nil
	}
	{{ end }}

	t.col.Append(val)

	return nil
}
{{ end }}

func (t *{{ $type.ColumnTypeName }}) Reset() {
	t.col.Reset()
	{{- if $type.Nullable }}
	t.nullCol.Reset()
	{{- end }}
	{{- if $type.LowCardinality }}
	t.lcCol.Reset()
	{{- end }}
}

func (t *{{ $type.ColumnTypeName }}) Type() proto.ColumnType {
	{{- if $type.Nullable }}
	if t.nullable {
		return t.nullCol.Type()
	}
	{{- end }}
	{{- if $type.LowCardinality }}
	if t.lc {
		return t.lcCol.Type()
	}
	{{- end }}
	return t.col.Type()
}

func (t *{{ $type.ColumnTypeName }}) Rows() int {
	{{- if $type.Nullable }}
	if t.nullable {
		return t.nullCol.Rows()
	}
	{{- end }}
	{{- if $type.LowCardinality }}
	if t.lc {
		return t.lcCol.Rows()
	}
	{{- end }}
	return t.col.Rows()
}

func (t *{{ $type.ColumnTypeName }}) EncodeColumn(buffer *proto.Buffer) {
	{{- if $type.Nullable }}
	if t.nullable {
		t.nullCol.EncodeColumn(buffer)
		return
	}
	{{- end }}
	{{- if $type.LowCardinality }}
	if t.lc {
		t.lcCol.EncodeColumn(buffer)
		return
	}
	{{- end }}
	t.col.EncodeColumn(buffer)
}

{{ if $type.Preparable }}
// Prepare the column before sending.
func (t *{{ $type.ColumnTypeName }}) Prepare() error {
	{{- if $type.LowCardinality }}
	if t.lc {
		return t.lcCol.Prepare()
	}
	{{- end }}

	{{- if $type.IsEnum }}
	return t.col.Prepare()
	{{- else }}
	return nil
	{{- end }}
}
{{ end }}

{{ end }}
